package org.folio.entlinks.service.authority;

import java.util.UUID;
import java.util.function.BiConsumer;
import org.folio.entlinks.domain.entity.AuthoritySourceFile;
import org.springframework.data.domain.Page;

/**
 * Service interface for managing Authority Source Files.
 *
 * <p>Code is generated by Github Copilot.
 */
public interface AuthoritySourceFileServiceI {

  /**
   * Retrieves all Authority Source Files with pagination and optional CQL query.
   *
   * @param offset the offset of the first result
   * @param limit the maximum number of results
   * @param cql the CQL query string
   * @return a page of Authority Source Files
   */
  Page<AuthoritySourceFile> getAll(Integer offset, Integer limit, String cql);

  /**
   * Retrieves an Authority Source File by its ID.
   *
   * @param id the ID of the Authority Source File
   * @return the Authority Source File
   */
  AuthoritySourceFile getById(UUID id);

  /**
   * Searches for an Authority Source File by its ID.
   *
   * @param id the ID of the Authority Source File
   * @return the Authority Source File, or null if not found
   *   Note: This method assumes the authority source file exists for the given ID and thus throws exception in case no
   *   authority source file is found
   */
  AuthoritySourceFile findById(UUID id);

  /**
   * Searches for an Authority Source File by its name.
   *
   * @param name the name of the Authority Source File
   * @return the Authority Source File, or null if not found
   */
  AuthoritySourceFile findByName(String name);

  /**
   * Creates a new Authority Source File.
   *
   * @param entity the Authority Source File to create
   * @return the created Authority Source File
   */
  AuthoritySourceFile create(AuthoritySourceFile entity);

  /**
   * Updates an existing Authority Source File.
   *
   * @param id the ID of the Authority Source File to update
   * @param modified the modified Authority Source File
   * @return the updated Authority Source File
   */
  AuthoritySourceFile update(UUID id, AuthoritySourceFile modified);

  /**
   * Updates an existing Authority Source File with a publish consumer.
   *
   * @param id the ID of the Authority Source File to update
   * @param modified the modified Authority Source File
   * @param publishConsumer the consumer to publish changes
   * @return the updated Authority Source File
   */
  AuthoritySourceFile update(UUID id, AuthoritySourceFile modified,
                             BiConsumer<AuthoritySourceFile, AuthoritySourceFile> publishConsumer);

  /**
   * Deletes an Authority Source File by its ID.
   *
   * @param id the ID of the Authority Source File to delete
   */
  void deleteById(UUID id);

  /**
   * Retrieves the next HRID for an Authority Source File.
   *
   * @param id the ID of the Authority Source File
   * @return the next HRID
   */
  String nextHrid(UUID id);

  /**
   * Checks if authorities exist for a given Authority Source File.
   *
   * @param sourceFileId the ID of the Authority Source File
   * @return true if authorities exist, false otherwise
   */
  boolean authoritiesExistForSourceFile(UUID sourceFileId);

  /**
   * Checks if authorities exist for a given Authority Source File in a specific tenant and table.
   *
   * @param sourceFileId the ID of the Authority Source File
   * @param tenantId the tenant ID
   * @param tableName the table name
   * @return true if authorities exist, false otherwise
   */
  boolean authoritiesExistForSourceFile(UUID sourceFileId, String tenantId, String tableName);

  /**
   * Creates a sequence for an Authority Source File.
   *
   * @param sequenceName the name of the sequence
   * @param startNumber the starting number of the sequence
   */
  void createSequence(String sequenceName, int startNumber);

  /**
   * Deletes a sequence for an Authority Source File.
   *
   * @param sequenceName the name of the sequence
   */
  void deleteSequence(String sequenceName);
}
